using System;

public class EaseBaseApi
{
    protected string СетевойАдресДоФайловогоХранилища;
    protected string ЛогинКБазе;
    protected string ПарольКБазе;
    protected string ИмяБазы;

    System.Net.WebClient КлентДоХранилища;

    public EaseBaseApi(string ПереданныйАдресДоХоста, string ПереданныйЛогин, string ПереданныйПароль, string ПолезноеИмяБазы)
    {
        this.ЛогинКБазе = ПереданныйЛогин;
        this.ПарольКБазе = ПереданныйПароль;
        this.СетевойАдресДоФайловогоХранилища = ПереданныйАдресДоХоста;
        this.ИмяБазы = ПолезноеИмяБазы;
        this.КлентДоХранилища = new System.Net.WebClient();
        КлентДоХранилища.BaseAddress = ПереданныйАдресДоХоста;
    }

    public byte[] ЗаписьДанных(string ПолученныйИндификатор, byte[] ПолученныеДанныеДляЗаписи)
    {
        byte[] Запрос = new byte[1024];
        System.Text.UTF8Encoding.UTF8.GetBytes(ЛогинКБазе + ' ' + ПарольКБазе + ' ' + ИмяБазы + " ЗаписьДанных " + ПолученныйИндификатор + '.').CopyTo(Запрос, 0);
        List<byte> КонечныйБайтовыйЗапросКСерверу = new List<byte>(Запрос);
        КонечныйБайтовыйЗапросКСерверу.AddRange(ПолученныеДанныеДляЗаписи);
        return КлентДоХранилища.UploadData(СетевойАдресДоФайловогоХранилища, КонечныйБайтовыйЗапросКСерверу.ToArray());
    }

    public string[] ЗапроситьСписокИндификаторов()
    {
        byte[] Запрос = new byte[1024];
        System.Text.UTF8Encoding.UTF8.GetBytes(ЛогинКБазе + ' ' + ПарольКБазе + ' ' + ИмяБазы + " ЗапроситьСписокИндификаторов" + '.').CopyTo(Запрос, 0);
        List<byte> КонечныйБайтовыйЗапросКСерверу = new List<byte>(Запрос);
        return System.Text.UTF8Encoding.UTF8.GetString(КлентДоХранилища.UploadData(СетевойАдресДоФайловогоХранилища, КонечныйБайтовыйЗапросКСерверу.ToArray())).Split('\n');
    }

    public byte[] СчитатьДанные(string ПолученныйИндификатор)
    {
        byte[] Запрос = new byte[1024];
        System.Text.UTF8Encoding.UTF8.GetBytes(ЛогинКБазе + ' ' + ПарольКБазе + ' ' + ИмяБазы + " СчитатьДанные " + ПолученныйИндификатор + '.').CopyTo(Запрос, 0);
        List<byte> КонечныйБайтовыйЗапросКСерверу = new List<byte>(Запрос);
        return КлентДоХранилища.UploadData(СетевойАдресДоФайловогоХранилища, КонечныйБайтовыйЗапросКСерверу.ToArray());
    }

     public string[] МножественноеЧтение(string[] СписокИндификаторов)
    {
        string ИндификаторыВОднуСтроку = string.Join('\n', СписокИндификаторов);
        byte[] ИндификаторыВБайтовыйМассив = System.Text.UTF8Encoding.UTF8.GetBytes(ИндификаторыВОднуСтроку);
        string ИндификаторыВБэйс64 = System.Convert.ToBase64String(ИндификаторыВБайтовыйМассив);
        byte[] Запрос = new byte[1024];
        System.Text.UTF8Encoding.UTF8.GetBytes(ЛогинКБазе + ' ' + ПарольКБазе + ' ' + ИмяБазы + " СчитатьДанные " + ИндификаторыВБэйс64 + '.').CopyTo(Запрос, 0);
        List<byte> КонечныйБайтовыйЗапросКСерверу = new List<byte>(Запрос);
        byte[] РезультатЗапросаВВидеБайт = КлентДоХранилища.UploadData(СетевойАдресДоФайловогоХранилища, КонечныйБайтовыйЗапросКСерверу.ToArray());
        string РезультатЗапросаВВидеБайc64 = System.Convert.ToBase64String(РезультатЗапросаВВидеБайт);
        System.Convert.FromBase64String
        return ;
    }
    public byte[] ПерезаписатьДанные(string ПолученныйИндификатор, byte[] ПолученныеДанныеДляЗаписи)
    {
        byte[] Запрос = new byte[1024];
        System.Text.UTF8Encoding.UTF8.GetBytes(ЛогинКБазе + ' ' + ПарольКБазе + ' ' + ИмяБазы + " ПерезаписатьДанные " + ПолученныйИндификатор + '.').CopyTo(Запрос, 0);
        List<byte> КонечныйБайтовыйЗапросКСерверу = new List<byte>(Запрос);
        КонечныйБайтовыйЗапросКСерверу.AddRange(ПолученныеДанныеДляЗаписи);
        return КлентДоХранилища.UploadData(СетевойАдресДоФайловогоХранилища, КонечныйБайтовыйЗапросКСерверу.ToArray());
    }

    public byte[] ПереименоватьИндификатор(string ПолученныйИсходныйИндификатор, string ПолученныйНовыйИндификатор)
    {
        byte[] Запрос = new byte[1024];
        System.Text.UTF8Encoding.UTF8.GetBytes(ЛогинКБазе + ' ' + ПарольКБазе + ' ' + ИмяБазы + " ПереименоватьИндификатор " + ПолученныйИсходныйИндификатор + ' ' + ПолученныйНовыйИндификатор + '.').CopyTo(Запрос, 0);
        List<byte> КонечныйБайтовыйЗапросКСерверу = new List<byte>(Запрос);
        return КлентДоХранилища.UploadData(СетевойАдресДоФайловогоХранилища, КонечныйБайтовыйЗапросКСерверу.ToArray());
    }

    public byte[] УдалитьДанные(string ПолученныйИндификатор)
    {
        byte[] Запрос = new byte[1024];
        System.Text.UTF8Encoding.UTF8.GetBytes(ЛогинКБазе + ' ' + ПарольКБазе + ' ' + ИмяБазы + " УдалитьДанные " + ПолученныйИндификатор + '.').CopyTo(Запрос, 0);
        List<byte> КонечныйБайтовыйЗапросКСерверу = new List<byte>(Запрос);
        return КлентДоХранилища.UploadData(СетевойАдресДоФайловогоХранилища, КонечныйБайтовыйЗапросКСерверу.ToArray());
    }                      
                             
}