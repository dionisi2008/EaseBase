using System;
using System.Collections;
using System.Text;

namespace EaseBase
{

    public class ServerBase
    {
        protected EaseBaseApi АпиКХранилищуДанных;
        protected string ИмяБазы, ЛогинАдмина, ПарольАдмина;
        protected List<string> СписокИндфикикаторовВХранилище;

        protected List<Таблица> СписокТаблиц;

        public ServerBase(EaseBaseApi ПолучееноАпиХранилищаДанных, string ПолученноеИмяБазы, string ПолученноеЛогинАдминаБазы, string ПолученноеПарольАдминаБазы)
        {
            СписокТаблиц = new List<Таблица>();
            (АпиКХранилищуДанных, ИмяБазы, ЛогинАдмина, ПарольАдмина) =
            (ПолучееноАпиХранилищаДанных, ПолученноеИмяБазы, ПолученноеЛогинАдминаБазы, ПолученноеПарольАдминаБазы);
            СписокИндфикикаторовВХранилище = new List<string>(АпиКХранилищуДанных.ЗапроситьСписокИндификаторов());
            if (ПроверкаНаличиеБазыВХранилище(ПолученноеИмяБазы))
            {
                РазверткаТаблицВБАзе();
            }
            else
            {
                СозданиеПользователя(new Пользователь(ПолученноеЛогинАдминаБазы, ПолученноеПарольАдминаБазы));

            }
        }

        public void РазверткаТаблицВБАзе()
        {
            List<string> СписокИндификаторовТаблицВыгруженныйИзХранилища = new List<string>(Encoding.UTF8.GetString(АпиКХранилищуДанных.СчитатьДанные("БазаДанных_" + ИмяБазы)).Split('\n'));
            for (int shag = 0; shag <= СписокИндификаторовТаблицВыгруженныйИзХранилища.Count -1; shag++)
            {
                Console.WriteLine(string.Join('\n', СписокИндификаторовТаблицВыгруженныйИзХранилища));
            }
        }
        public bool ПроверкаНаличиеБазыВХранилище(string ПолученноеИмяБазы)
        {
            for (int shag = 0; shag <= СписокИндфикикаторовВХранилище.Count - 1; shag++)
            {
                if (СписокИндфикикаторовВХранилище[shag] == "БазаДанных_" + ПолученноеИмяБазы)
                {
                    return true;
                }
            }
            return false;
        }


        public void СозданиеПользователя(Пользователь ПолученныйПользовательДляЗаписиВБазу)
        {
            if (!ПоискПользователяВБазе(ПолученныйПользовательДляЗаписиВБазу.Логин))
            {
                ПолученныйПользовательДляЗаписиВБазу.АЙДИ = ОпределениеУникальногоИндификатора();
                ЗписьВПамятьБазыНовойТаблицы(ПолученныйПользовательДляЗаписиВБазу);
                АпиКХранилищуДанных.ЗаписьДанных(ИмяБазы + '_' + ПолученныйПользовательДляЗаписиВБазу.АЙДИ, ПолученныйПользовательДляЗаписиВБазу.ТаблицаВВидеМассиваБайн());
            }
        }

        public bool ПоискПользователяВБазе(string ПолученныйЛогин)
        {
            for (int shag = 0; shag <= СписокТаблиц.Count - 1; shag++)
            {
                if (СписокТаблиц[shag].ТипТаблицы == "Пользователь")
                {
                    Пользователь ВременныйПользователь = (Пользователь)СписокТаблиц[shag];
                    if (ВременныйПользователь.Логин == ПолученныйЛогин)
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        public void ЗписьВПамятьБазыНовойТаблицы(Таблица ПолученнаяТаблица)
        {
            СписокТаблиц.Add(ПолученнаяТаблица);
            ЗаписьБазыВХранилище();
        }

        public void ЗаписьБазыВХранилище()
        {
            List<string> СписокИндификаторовВБазеДляЗаписиВХранилище = new List<string>();
            for (int shag = 0; shag <= this.СписокТаблиц.Count - 1; shag++)
            {
                СписокИндификаторовВБазеДляЗаписиВХранилище.Add(СписокТаблиц[shag].АЙДИ.ToString());
            }
            if (ПроверкаНаличиеБазыВХранилище(this.ИмяБазы))
            {
                АпиКХранилищуДанных.ПерезаписатьДанные("БазаДанных_" + ИмяБазы, Encoding.UTF8.GetBytes(string.Join('\n', СписокИндификаторовВБазеДляЗаписиВХранилище)));
            }
            else
            {
                АпиКХранилищуДанных.ЗаписьДанных("БазаДанных_" + ИмяБазы, Encoding.UTF8.GetBytes(string.Join('\n', СписокИндификаторовВБазеДляЗаписиВХранилище)));
            }
        }
        public ulong ОпределениеУникальногоИндификатора()
        {
            ulong ПредположительныйСлучайныйИндификатор = ((ulong)new Random(DateTime.Now.Millisecond).NextInt64());
            for (int shag = 0; shag <= СписокТаблиц.Count - 1; shag++)
            {
                if (СписокТаблиц[shag].АЙДИ == ПредположительныйСлучайныйИндификатор)
                {
                    ПредположительныйСлучайныйИндификатор = ((ulong)new Random(DateTime.Now.Millisecond + shag).NextInt64());
                    shag = 0;
                }
            }
            return ПредположительныйСлучайныйИндификатор;
        }

    }



}
