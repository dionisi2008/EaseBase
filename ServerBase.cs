using System;
using System.Collections;
using System.Text;

namespace EaseBase
{

    public class ServerBase
    {
        public EaseBaseApi АпиКХранилищуДанных;
        protected string ИмяБазы, ЛогинАдмина, ПарольАдмина;
        protected List<string> СписокИндфикикаторовВХранилище;

        public Dictionary<string, List<Таблица>> СводТаблиц;

        public ServerBase(EaseBaseApi ПолучееноАпиХранилищаДанных, string ПолученноеИмяБазы, string ПолученноеЛогинАдминаБазы, string ПолученноеПарольАдминаБазы)
        {
            СводТаблиц = new Dictionary<string, List<Таблица>>();
            // ПолучееноАпиХранилищаДанных.УдалитьДанные("БазаДанных_Site");
            // СписокТаблиц = new List<Таблица>();
            (АпиКХранилищуДанных, ИмяБазы, ЛогинАдмина, ПарольАдмина) =
            (ПолучееноАпиХранилищаДанных, ПолученноеИмяБазы, ПолученноеЛогинАдминаБазы, ПолученноеПарольАдминаБазы);
            СписокИндфикикаторовВХранилище = new List<string>(АпиКХранилищуДанных.ЗапроситьСписокИндификаторов());
            // Console.WriteLine(string.Join('\n', СписокИндфикикаторовВХранилище.ToArray()));
            if (ПроверкаНаличиеБазыВХранилище(ПолученноеИмяБазы))
            {
                РазверткаТаблицВБАзе();
            }
            else
            {
                СозданиеПользователя(new Пользователь(ПолученноеЛогинАдминаБазы, ПолученноеПарольАдминаБазы));
                СозданиеНастройкиБазы(new НастройкиБазы("*", 100, true, @".\", 100000));
            }
        }

        public void РазверткаТаблицВБАзе()
        {
            string[] ИндификаторыБазы = Encoding.UTF8.GetString(АпиКХранилищуДанных.СчитатьДанные("БазаДанных_" + ИмяБазы)).Split('\n');
            for (int shag = 0; shag <= ИндификаторыБазы.Length - 1; shag++)
            {
                ИндификаторыБазы[shag] = ИмяБазы + "_" + ИндификаторыБазы[shag];
            }
            List<string[]> ВыгрузкаДанныхИзХранилищаЦеликом = АпиКХранилищуДанных.МножественноеЧтение(ИндификаторыБазы);
            if (ВыгрузкаДанныхИзХранилищаЦеликом.Count > 1)
            {
                for (int shag = 0; shag <= ВыгрузкаДанныхИзХранилищаЦеликом.Count - 1; shag++)
                {
                    string[] ВременныйЭлемент = ВыгрузкаДанныхИзХранилищаЦеликом[shag];
                    switch (ВыгрузкаДанныхИзХранилищаЦеликом[shag][1])
                    {
                        case "Пользователь":

                            Пользователь ВременныйПользователь = new Пользователь(ВременныйЭлемент[2], ВременныйЭлемент[3]);
                            ВременныйПользователь.АЙДИ = System.Convert.ToUInt64(ВременныйЭлемент[0]);
                            ВременныйПользователь.ТипТаблицы = ВременныйЭлемент[1];
                            if (СводТаблиц.ContainsKey("Пользователь"))
                            {
                                СводТаблиц["Пользователь"].Add(ВременныйПользователь);
                            }
                            else
                            {
                                List<Таблица> ПервичнаяТаблица = new List<Таблица>();
                                ПервичнаяТаблица.Add(ВременныйПользователь);
                                СводТаблиц.Add("Пользователь", ПервичнаяТаблица);
                            }

                            break;
                        case "Локаль":
                            Локаль ВременнаяЛокаль = new Локаль(ВременныйЭлемент[2]);
                            ВременнаяЛокаль.АЙДИ = System.Convert.ToUInt64(ВременныйЭлемент[0]);
                            ВременнаяЛокаль.ТипТаблицы = ВременныйЭлемент[1];
                            for (int shag2 = 3; shag2 <= ВременныйЭлемент.Length - 1; shag2 = shag2 + 2)
                            {
                                ВременнаяЛокаль.СписокКлючейИЗначений.Add(ВременныйЭлемент[shag2], ВременныйЭлемент[shag2 + 1]);
                            }
                            if (СводТаблиц.ContainsKey("Локаль"))
                            {
                                СводТаблиц["Локаль"].Add(ВременнаяЛокаль);
                            }
                            else
                            {
                                List<Таблица> ПервичнаяТаблица = new List<Таблица>();
                                ПервичнаяТаблица.Add(ВременнаяЛокаль);
                                СводТаблиц.Add("Локаль", ПервичнаяТаблица);
                            }

                            break;
                        case "Настройки Базы":
                            НастройкиБазы ВременнаяНапстройкиБазы = new НастройкиБазы();
                            ВременнаяНапстройкиБазы.АЙДИ = System.Convert.ToUInt64(ВременныйЭлемент[0]);
                            ВременнаяНапстройкиБазы.ТипТаблицы = ВременныйЭлемент[1];
                            ВременнаяНапстройкиБазы.ИмяХостаБазы = ВременныйЭлемент[2];
                            ВременнаяНапстройкиБазы.ПортБазыДанных = System.Convert.ToInt32(ВременныйЭлемент[3]);
                            ВременнаяНапстройкиБазы.СозданиеЛогов = System.Convert.ToBoolean(ВременныйЭлемент[4]);
                            ВременнаяНапстройкиБазы.ПутьДляЛогФайла = ВременныйЭлемент[5];
                            ВременнаяНапстройкиБазы.РазмерХранилищаТаблиц = ((ulong)System.Convert.ToInt64(ВременныйЭлемент[6]));
                            if (СводТаблиц.ContainsKey("Настройки Базы"))
                            {
                                СводТаблиц["Настройки Базы"].Add(ВременнаяНапстройкиБазы);
                            }
                            else
                            {
                                List<Таблица> ПервичнаяТаблица = new List<Таблица>();
                                ПервичнаяТаблица.Add(ВременнаяНапстройкиБазы);
                                СводТаблиц.Add("Настройки Базы", ПервичнаяТаблица);
                            }
                            break;
                        default:
                            if (СводТаблиц.ContainsKey(ВременныйЭлемент[1]))
                            {
                                СводТаблиц[ВременныйЭлемент[1]].Add(new Таблица(ВременныйЭлемент));
                            }
                            else
                            {
                                List<Таблица> ПервичнаяТаблица = new List<Таблица>();
                                ПервичнаяТаблица.Add(new Таблица(ВременныйЭлемент));
                                СводТаблиц.Add(ВременныйЭлемент[1], ПервичнаяТаблица);
                            }

                            break;
                    }
                }


            }
        }
        public bool ПроверкаНаличиеБазыВХранилище(string ПолученноеИмяБазы)
        {
            for (int shag = 0; shag <= СписокИндфикикаторовВХранилище.Count - 1; shag++)
            {
                if (СписокИндфикикаторовВХранилище[shag] == "БазаДанных_" + ПолученноеИмяБазы)
                {
                    return true;
                }
            }
            return false;
        }


        public void СозданиеПользователя(Пользователь ПолученныйПользовательДляЗаписиВБазу)
        {
            if (!ПоискПользователяВБазе(ПолученныйПользовательДляЗаписиВБазу.Логин))
            {
                ПолученныйПользовательДляЗаписиВБазу.АЙДИ = ОпределениеУникальногоИндификатора();
                ЗписьВПамятьБазыНовойТаблицы(ПолученныйПользовательДляЗаписиВБазу);
                АпиКХранилищуДанных.ЗаписьДанных(ИмяБазы + '_' + ПолученныйПользовательДляЗаписиВБазу.АЙДИ, ПолученныйПользовательДляЗаписиВБазу.ТаблицаВВидеМассиваБайн());
            }
        }

        public void СозданиеНастройкиБазы(НастройкиБазы ПолученныйНастройкиБазыДляЗаписиВБазу)
        {
            ПолученныйНастройкиБазыДляЗаписиВБазу.АЙДИ = ОпределениеУникальногоИндификатора();
            ЗписьВПамятьБазыНовойТаблицы(ПолученныйНастройкиБазыДляЗаписиВБазу);
            АпиКХранилищуДанных.ЗаписьДанных(ИмяБазы + '_' + ПолученныйНастройкиБазыДляЗаписиВБазу.АЙДИ, ПолученныйНастройкиБазыДляЗаписиВБазу.ТаблицаВВидеМассиваБайн());
        }

        public void ПерезаписатьНастройкиБазы(НастройкиБазы ПолученныйНастройкиБазыДляЗаписиВБазу)
        {
            if (this.СводТаблиц.ContainsKey("Настройки Базы"))
            {
                this.СводТаблиц["Настройки Базы"] = new List<Таблица>();
                this.СводТаблиц["Настройки Базы"].Add(ПолученныйНастройкиБазыДляЗаписиВБазу);
                АпиКХранилищуДанных.ПерезаписатьДанные(ИмяБазы + '_' + ПолученныйНастройкиБазыДляЗаписиВБазу.АЙДИ.ToString(),
                ПолученныйНастройкиБазыДляЗаписиВБазу.ТаблицаВВидеМассиваБайн());
            }

            СозданиеНастройкиБазы(ПолученныйНастройкиБазыДляЗаписиВБазу);
        }
        public НастройкиБазы ВыгрузкаНастроекБазы()
        {
            if (this.СводТаблиц.ContainsKey("Настройки Базы"))
            {
                return (НастройкиБазы)this.СводТаблиц["Настройки Базы"][0];
            }
            return null;
        }

        public bool ПоискПользователяВБазе(string ПолученныйЛогин)
        {
            for (int shag = 0; shag <= СводТаблиц["Пользователь"].Count - 1; shag++)
            {
                Пользователь ВременныйПользователь = (Пользователь)СводТаблиц["Пользователь"][shag];
                if (ВременныйПользователь.Логин == ПолученныйЛогин)
                {
                    return true;
                }
            }
            return false;
        }

        public void ЗписьВПамятьБазыНовойТаблицы(Таблица ПолученнаяТаблица)
        {
            СводТаблиц[ПолученнаяТаблица.ТипТаблицы].Add(ПолученнаяТаблица);
            ЗаписьБазыВХранилище();
        }

        public void ЗаписьБазыВХранилище()
        {
            List<string> СписокИндификаторовВБазеДляЗаписиВХранилище = new List<string>();

            for (int shag1 = 0; shag1 <= СводТаблиц.Keys.ToArray().Length - 1; shag1++)
            {
                for (int shag2 = 0; shag2 <= СводТаблиц[СводТаблиц.Keys.ToArray()[shag1]].ToArray().Length - 1; shag2++)
                {
                    СписокИндификаторовВБазеДляЗаписиВХранилище.Add(СводТаблиц[СводТаблиц.Keys.ToArray()[shag1]][shag2].АЙДИ.ToString());
                }
            }
            if (ПроверкаНаличиеБазыВХранилище(this.ИмяБазы))
            {
                АпиКХранилищуДанных.ПерезаписатьДанные("БазаДанных_" + ИмяБазы, Encoding.UTF8.GetBytes(string.Join('\n', СписокИндификаторовВБазеДляЗаписиВХранилище)));
            }
            else
            {
                АпиКХранилищуДанных.ЗаписьДанных("БазаДанных_" + ИмяБазы, Encoding.UTF8.GetBytes(string.Join('\n', СписокИндификаторовВБазеДляЗаписиВХранилище)));
            }
            СписокИндфикикаторовВХранилище = new List<string>(АпиКХранилищуДанных.ЗапроситьСписокИндификаторов());
        }
        public ulong ОпределениеУникальногоИндификатора()
        {
            ulong ПредположительныйСлучайныйИндификатор = ((ulong)new Random(DateTime.Now.Millisecond).NextInt64());
            for (int shag1 = 0; shag1 <= СводТаблиц.Keys.ToArray().Length - 1; shag1++)
            {
                for (int shag2 = 0; shag2 <= СводТаблиц[СводТаблиц.Keys.ToArray()[shag1]].ToArray().Length - 1; shag2++)
                {
                    if (СводТаблиц[СводТаблиц.Keys.ToArray()[shag1]].ToArray()[shag2].АЙДИ == ПредположительныйСлучайныйИндификатор)
                    {
                        ПредположительныйСлучайныйИндификатор = ((ulong)new Random(DateTime.Now.Millisecond + shag1 + shag2).NextInt64());
                        shag1 = 0;
                    }

                }
            }

            return ПредположительныйСлучайныйИндификатор;
        }

        public string[] ВернустьСписокЛогиновПользователей()
        {

            return new string[3];
        }

    }



}
